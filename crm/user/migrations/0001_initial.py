# Generated by Django 2.0.7 on 2018-08-07 08:55

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(blank=True, max_length=20)),
                ('middle_name', models.CharField(blank=True, max_length=20)),
                ('last_name', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254, unique=True)),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('phone_number', models.CharField(blank=True, max_length=10, validators=[django.core.validators.RegexValidator(message="Номер должен быть в формате '9633609225'", regex='^\\+?1?\\d{10}$')], verbose_name='Номер мобильного телефона')),
                ('extra_phone_number', models.CharField(blank=True, max_length=10, validators=[django.core.validators.RegexValidator(message="Номер должен быть в формате '9633609225'", regex='^\\+?1?\\d{10}$')], verbose_name='Дополнительный номер')),
                ('other_contacts', models.CharField(blank=True, max_length=200, verbose_name='Дополнительные контакты')),
                ('timezone', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True, verbose_name='Часовой пояс')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активный аккаунт')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Статус персонала')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Статус администратора')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
        ),
        migrations.CreateModel(
            name='EmployeePosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, verbose_name='Должность')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Должность сотрудника',
                'verbose_name_plural': 'Должности сотрудников',
            },
        ),
        migrations.CreateModel(
            name='GroupEmployee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='Имя группы')),
                ('description', models.CharField(max_length=400, verbose_name='Описание')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('creator', models.CharField(max_length=5, verbose_name='Создатель')),
            ],
            options={
                'verbose_name': 'Группа',
                'verbose_name_plural': 'Группы',
            },
        ),
        migrations.CreateModel(
            name='ContactPerson',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('region', models.CharField(blank=True, max_length=60, verbose_name='Регион')),
                ('city', models.CharField(blank=True, max_length=60, verbose_name='Город')),
                ('dialing_code', models.CharField(max_length=10, verbose_name='Телефонный код города')),
            ],
            options={
                'verbose_name': 'Контактное лицо',
                'verbose_name_plural': 'Контактные лица',
            },
            bases=('user.user',),
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('login_skype', models.CharField(blank=True, max_length=50, verbose_name='Skype')),
                ('confirmed_email', models.BooleanField(default=False, verbose_name='Подтвержденный email')),
                ('group', models.OneToOneField(default=None, on_delete=django.db.models.deletion.PROTECT, to='user.GroupEmployee')),
            ],
            options={
                'verbose_name': 'Сотрудник',
                'verbose_name_plural': 'Сотрудники',
            },
            bases=('user.user',),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='user.EmployeePosition', verbose_name='Должность'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
